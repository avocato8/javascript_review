//자바스크립트의 함수는 객체 타입의 값
//자바스크립트의 함수는 값처럼 변수에 할당할 수도 있고
//프로퍼티 값이 될 수도있고, 배열의 요소가 될 수도 있다.

//이처럼 값의 성질을 갖는 객체를 일급 객체라고 한다.

//함수는 일급 객체이므로 함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다.

//--------------------함수 표현식--------------------
var add = function (x, y) {
  return x + y;
};
console.log(add(2, 5)); // 7

//함수 리터럴의 함수 이름은 생략가능
//이런 함수를 익명 함수라 한다.

//기명 함수 표현식
var add = function foo(x, y) {
  return x + y;
};
//함수 객체를 가리키는 식별자로 호출
console.log(add(2, 5));
//함수 이름으로 호출하면 ReferenceError 발생
//함수 이름은 함수 몸체 내부에서만 유효
console.log(foo(2, 5)); //ReferneceError

//--------------------함수 생성 시점과 함수 호이스팅--------------------
//함수 참조
console.dir(add); // f add(x, y)
console.dir(sub); // undefined

//함수 호출
console.log(add(2, 5)); // 7
console.log(sub(2, 5)); // TypeError

//함수 선언문
function add(x, y) {
  return x + y;
}
//함수 표현식
var sub = function (x, y) {
  return x - y;
};
//함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.
//함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다.
//생성시점이 다르다.
// 함수 선언문은 런타임 이전에 자바스크립트 엔진에 의해 먼저 함수 객체가 생성
// 이처럼 함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트의 특징을 함수 호이스팅이라 한다.

//변수 할당문의 값은 할당문이 실행되는 시점, 에 평가되어 함수 객체가 된다.
//따라서, 함수 표현식으로 함수를 정의하면 변수 호이스팅이 발생

//함수 호이스팅은 함수를 호출하기 전에 반드시 함수를 선언해야 한다는 당연한 규칙을 무시하므로,
//함수 표현식을 사용할 것을 권장~