//객체는 프로퍼티 개수가 정해져 있지 않는다.
//따라서 객체는 원시 값과 같이 확보해야 할 메모리 공간의 크기를 사전에 정해둘 수 없다.
// 해시 테이블과 비슷

//객체는 변경 가능한 값
var person = {
  name: "Lee",
};
//원시 값을 할당한 변수가 기억하는 메모리 주소를 통해 메모리 공간에 접근하면 원시 값에 접근할 수 있다.
//즉 원시 값을 할당한 변수는 원시 값 자체를 값으로 갖는다.

//하지만 객체는 객체를 할당한 변수가 기억하는 메모리 주소를 통해
//메모리 공간에 접근하면 참조 값에 접근할 수 있다.

//원시 값은 변경 불가능한 값이므로 원시 값을 갖는 변수의 값을 변경하려면
//재할당 외에는 방법이 없다.
//하지만 객체는 변경가능한 값
//재할당 없이 프로퍼티를 동적으로 추가할 수도 있고 프로퍼티 값을갱신, 삭제가 가능
person.name = "kim";

person.address = "Seoul";
console.log(person);

//이런 구조적 단점에 따른 부작용으로
// 원시 값과는 다르게 여러 개의 식별자가 하나의 객체를 공유할 수 있다.

//참조에 의한 전달
var person = {
  name: "Lee",
};
//참조값을 복사(얕은 복사)
var copy = person;
//copy와 person 식별자가 하나의 객체를 공유
console.log(copy === person); // true

copy.name = 'kim';
person.address = 'Seoul';
console.log(person);
console.log(copy);