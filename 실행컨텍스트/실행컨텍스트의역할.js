//전역 변수 선언
const x = 1;
const y = 2;

//함수 정의
function foo(a) {
  //지역 변수 선언
  const x = 10;
  const y = 20;

  //메서드 호출
  console.log(a + x + y); // 130
}

//함수 호출
foo(100);

//메서드 호출
console.log(x + y); // 3

//1. 전역 코드 평가
//전역 코드를 실행하기에 앞서 먼저 전역 코드 평가 과정을 거치며 전역 코드를 실행하기 위한 준비를 한다.
//소스코드 평가 과정에서는 선언문만 먼저 실행한다.
//그 결과 전역 변수와 전역 함수가 실행컨텍스트가 관리하는 전역 스코프에 등록
//이 때 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 객체의 프로퍼티와 메서드가 된다.

//2. 전역 코드 실행
// 전역 코드 평가 과정이 끝나면 런타임이 시작되어 전역 코드가 순차적으로 실행된다. 이 때 전역 변수에 값이 할당되고 함수가 호출된다.
//함수가 호출되면 순차적으로 실행되된 전역 코드의 실행을 일시 중단하고 코드 실행 순서를 변경하여 함수 내부로 진입

//3. 함수 코드 평가
//함수 호출에 의해 함수 내부로 진입하면 함수 내부의 문들을 실행하기에 앞서 함수 코드 평가 과정을 거치며 함수 코드를 실행하기 위한 준비를 한다.
//이 때 매개변수와 지역 변수 선언문이 먼저 실행되고 그 결과 생성된 매개변수와 지역 변수가 실행컨텍스트가 관리하는 지역 스코프에 등록
//또한 함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정

//4. 함수 코드 실행
//함수 코드 평가 과정이 끝나면 런타임이 시작되어 함수 코드가 순차적으로 실행되기 시작
//이 때 매개변수와 지역 변수에 값이 할당
//console.log 메서드를 호출하기 위해 먼저 식별자인 console을 스코프 체인을 통해 검색
//console 식별자는 스코프 체인에 등록되어있지 않고, 전역 객체에 프로퍼티로 존재

//log 프로퍼티를 console 객체의 프로토타입 체인을 통해 검색. 그 후 console.log 메서드에 인수로 전달된 표현식 a + x + y가 평가
//a, x, y 식별자는 스코프 체인을 통해 검색


//이처럼 코드가 실행되려면 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.
//실행 컨텍스트는 소스코드를 실행하는 데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.
//식별자와 스코프는 실행 컨텍스트의 렉시컬 환경으로 관리하고, 코드 실행 순서는 실행 컨텍스트 스택으로 관리한다.